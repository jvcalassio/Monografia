
@inproceedings{jamrozik_mining_2016,
	address = {New York, NY, USA},
	series = {{ICSE} '16},
	title = {Mining {Sandboxes}},
	isbn = {978-1-4503-3900-1},
	url = {https://doi.org/10.1145/2884781.2884782},
	doi = {10.1145/2884781.2884782},
	abstract = {We present sandbox mining, a technique to confine an application to resources accessed during automatic testing. Sandbox mining first explores software behavior by means of automatic test generation, and extracts the set of resources accessed during these tests. This set is then used as a sandbox, blocking access to resources not used during testing. The mined sandbox thus protects against behavior changes such as the activation of latent malware, infections, targeted attacks, or malicious updates.The use of test generation makes sandbox mining a fully automatic process that can be run by vendors and end users alike. Our BOXMATE prototype requires less than one hour to extract a sandbox from an Android app, with few to no confirmations required for frequently used functionality.},
	booktitle = {Proceedings of the 38th {International} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Jamrozik, Konrad and von Styp-Rekowsky, Philipp and Zeller, Andreas},
	year = {2016},
	note = {event-place: Austin, Texas},
	pages = {37--48},
}

@inproceedings{bao_mining_2018,
	title = {Mining sandboxes: {Are} we there yet?},
	doi = {10.1109/SANER.2018.8330231},
	booktitle = {2018 {IEEE} 25th {International} {Conference} on {Software} {Analysis}, {Evolution} and {Reengineering} ({SANER})},
	author = {Bao, Lingfeng and Le, Tien-Duy B. and Lo, David},
	year = {2018},
	pages = {445--455},
}

@inproceedings{costa_droidxp_2020,
	title = {{DroidXP}: {A} {Benchmark} for {Supporting} the {Research} on {Mining} {Android} {Sandboxes}},
	doi = {10.1109/SCAM51674.2020.00021},
	booktitle = {2020 {IEEE} 20th {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation} ({SCAM})},
	author = {Costa, Francisco Handrick da and Medeiros, Ismael and Costa, Pedro and Menezes, Thales and Vinícius, Marcos and Bonifácio, Rodrigo and Canedo, Edna Dias},
	year = {2020},
	pages = {143--148},
}

@article{costa_exploring_2022,
	title = {Exploring the use of static and dynamic analysis to improve the performance of the mining sandbox approach for android malware identification},
	volume = {183},
	issn = {0164-1212},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121221001898},
	doi = {https://doi.org/10.1016/j.jss.2021.111092},
	abstract = {The popularization of the Android platform and the growing number of Android applications (apps) that manage sensitive data turned the Android ecosystem into an attractive target for malicious software. For this reason, researchers and practitioners have investigated new approaches to address Android’s security issues, including techniques that leverage dynamic analysis to mine Android sandboxes. The mining sandbox approach consists in running dynamic analysis tools on a benign version of an Android app. This exploratory phase records all calls to sensitive APIs. Later, we can use this information to (a) prevent calls to other sensitive APIs (those not recorded in the exploratory phase) or (b) run the dynamic analysis tools again in a different version of the app. During this second execution of the fuzzing tools, a warning of possible malicious behavior is raised whenever the new version of the app calls a sensitive API not recorded in the exploratory phase. The use of a mining sandbox approach is an effective technique for Android malware analysis, as previous research works revealed. Particularly, existing reports present an accuracy of almost 70\% in the identification of malicious behavior using dynamic analysis tools to mine android sandboxes. However, although the use of dynamic analysis for mining Android sandboxes has been investigated before, little is known about the potential benefits of combining static analysis with a mining sandbox approach for identifying malicious behavior. Accordingly, in this paper we present the results of two studies that investigate the impact of using static analysis to complement the performance of existing dynamic analysis tools tailored for mining Android sandboxes, in the task of identifying malicious behavior. In the first study we conduct a non-exact replication of a previous study (hereafter BLL-Study) that compares the performance of test case generation tools for mining Android sandboxes. Differently from the original work, here we isolate the effect of an independent static analysis component (DroidFax) they used to instrument the Android apps in their experiments. This decision was motivated by the fact that DroidFax could have influenced the efficacy of the dynamic analyses tools positively—through the execution of specific static analysis algorithms DroidFax also implements. In our second study, we carried out a new experiment to investigate the efficacy of taint analysis algorithms to complement the mining sandbox approach previously used to identify malicious behavior. To this end, we executed the FlowDroid tool to mine the source–sink flows from benign/malign pairs of Android apps used in a previous research work. Our study brings several findings. For instance, the first study reveals that DroidFax alone (static analysis) can detect 43.75\% of the malwares in the BLL-Study dataset, contributing substantially in the performance of the dynamic analysis tools in the BLL-Study. The results of the second study show that taint analysis is also practical to complement the mining sandboxes approach, with a performance similar to that reached by dynamic analysis tools.},
	journal = {Journal of Systems and Software},
	author = {Costa, Francisco Handrick da and Medeiros, Ismael and Menezes, Thales and Silva, João Victor da and Silva, Ingrid Lorraine da and Bonifácio, Rodrigo and Narasimhan, Krishna and Ribeiro, Márcio},
	year = {2022},
	keywords = {Malware detection, Android platform, Mining sandboxes, Static analysis and dynamic analysis},
	pages = {111092},
}

@inproceedings{le_towards_2018,
	title = {Towards {Mining} {Comprehensive} {Android} {Sandboxes}},
	doi = {10.1109/ICECCS2018.2018.00014},
	booktitle = {2018 23rd {International} {Conference} on {Engineering} of {Complex} {Computer} {Systems} ({ICECCS})},
	author = {Le, Tien-Duy B. and Bao, Lingfeng and Lo, David and Gao, Debin and Li, Li},
	year = {2018},
	pages = {51--60},
}

@misc{noauthor_android_2022,
	title = {Android {Runtime} ({ART}) and {Dalvik}},
	url = {https://source.android.com/docs/core/runtime},
	urldate = {2023-06-09},
	journal = {Android Open Source Project},
	month = sep,
	year = {2022},
}

@misc{noauthor_platform_2023,
	title = {Platform architecture},
	url = {https://developer.android.com/guide/platform},
	urldate = {2023-06-09},
	journal = {Android Developers},
	month = may,
	year = {2023},
}

@misc{noauthor_permissions_2023,
	title = {Permissions on {Android}},
	url = {https://developer.android.com/guide/topics/permissions/overview},
	urldate = {2023-06-09},
	journal = {Android Developers},
	month = may,
	year = {2023},
}

@misc{noauthor_application_2022,
	title = {Application {Sandbox}},
	url = {https://source.android.com/docs/security/app-sandbox},
	urldate = {2023-06-09},
	journal = {Android Open Source Project},
	month = oct,
	year = {2022},
}

@inproceedings{felt_android_2011,
	address = {New York, NY, USA},
	series = {{CCS} '11},
	title = {Android {Permissions} {Demystified}},
	isbn = {978-1-4503-0948-6},
	url = {https://doi.org/10.1145/2046707.2046779},
	doi = {10.1145/2046707.2046779},
	abstract = {Android provides third-party applications with an extensive API that includes access to phone hardware, settings, and user data. Access to privacy- and security-relevant parts of the API is controlled with an install-time application permission system. We study Android applications to determine whether Android developers follow least privilege with their permission requests. We built Stowaway, a tool that detects overprivilege in compiled Android applications. Stowaway determines the set of API calls that an application uses and then maps those API calls to permissions. We used automated testing tools on the Android API in order to build the permission map that is necessary for detecting overprivilege. We apply Stowaway to a set of 940 applications and find that about one-third are overprivileged. We investigate the causes of overprivilege and find evidence that developers are trying to follow least privilege but sometimes fail due to insufficient API documentation.},
	booktitle = {Proceedings of the 18th {ACM} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Felt, Adrienne Porter and Chin, Erika and Hanna, Steve and Song, Dawn and Wagner, David},
	year = {2011},
	note = {event-place: Chicago, Illinois, USA},
	keywords = {android, least privilege, permissions},
	pages = {627--638},
}

@inproceedings{felt_android_2012,
	address = {New York, NY, USA},
	series = {{SOUPS} '12},
	title = {Android {Permissions}: {User} {Attention}, {Comprehension}, and {Behavior}},
	isbn = {978-1-4503-1532-6},
	url = {https://doi.org/10.1145/2335356.2335360},
	doi = {10.1145/2335356.2335360},
	abstract = {Android's permission system is intended to inform users about the risks of installing applications. When a user installs an application, he or she has the opportunity to review the application's permission requests and cancel the installation if the permissions are excessive or objectionable. We examine whether the Android permission system is effective at warning users. In particular, we evaluate whether Android users pay attention to, understand, and act on permission information during installation. We performed two usability studies: an Internet survey of 308 Android users, and a laboratory study wherein we interviewed and observed 25 Android users. Study participants displayed low attention and comprehension rates: both the Internet survey and laboratory study found that 17\% of participants paid attention to permissions during installation, and only 3\% of Internet survey respondents could correctly answer all three permission comprehension questions. This indicates that current Android permission warnings do not help most users make correct security decisions. However, a notable minority of users demonstrated both awareness of permission warnings and reasonable rates of comprehension. We present recommendations for improving user attention and comprehension, as well as identify open challenges.},
	booktitle = {Proceedings of the {Eighth} {Symposium} on {Usable} {Privacy} and {Security}},
	publisher = {Association for Computing Machinery},
	author = {Felt, Adrienne Porter and Ha, Elizabeth and Egelman, Serge and Haney, Ariel and Chin, Erika and Wagner, David},
	year = {2012},
	note = {event-place: Washington, D.C.},
	keywords = {Android, mobile phones, smartphones, usable security},
}

@inproceedings{hamilton_evaluation_2009,
	title = {An {Evaluation} of {Current} {Java} {Bytecode} {Decompilers}},
	doi = {10.1109/SCAM.2009.24},
	booktitle = {2009 {Ninth} {IEEE} {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation}},
	author = {Hamilton, James and Danicic, Sebastian},
	year = {2009},
	pages = {129--136},
}

@misc{noauthor_logcat_2023,
	title = {Logcat command-line tool},
	url = {https://developer.android.com/tools/logcat},
	urldate = {2023-06-09},
	journal = {Android Developers},
	month = apr,
	year = {2023},
}

@techreport{cai_understanding_2016,
	title = {Understanding {Application} {Behaviours} for {Android} {Security}: {A} {Systematic} {Characterization}},
	url = {https://vtechworks.lib.vt.edu/bitstream/handle/10919/71678/cairyder_techreport.pdf},
	abstract = {In contrast to most existing research on Android focusing on specific security issues, there is little broad understanding of Android application run-time characteristics and their security implications. To mitigate this gap, we present the first dynamic characterization study of Android applications that targets such a broad understanding for Android security. Through lightweight method-level profiling, we have collected 33GB traces of method calls and inter-component communication (ICC) from 114 popular Android applications on Google Play and 61 communicating pairs among them that enabled an extensive empirical investigation of the run-time behaviours of Android applications. Our study revealed that (1) the Android framework was the target of 88.3\% of all calls during application executions, (2) callbacks accounted for merely 3\% of the total method calls, (3) 75\% of ICCs did not carry any data payloads with those doing so preferring bundles over URIs, (4) 85\% of sensitive data sources and sinks targeted one or two top categories of information or operations which were also most likely to constitute data leaks. We discuss the security implications of our findings to secure development and effective security defense of modern Android applications.},
	urldate = {2023-06-11},
	institution = {Department of Computer Science, Virginia Polytechnic Institute \& State University},
	author = {Cai, Haipeng},
	month = jun,
	year = {2016},
}

@inproceedings{li_droidbot_2017,
	title = {{DroidBot}: a lightweight {UI}-{Guided} test input generator for android},
	doi = {10.1109/ICSE-C.2017.8},
	booktitle = {2017 {IEEE}/{ACM} 39th {International} {Conference} on {Software} {Engineering} {Companion} ({ICSE}-{C})},
	author = {Li, Yuanchun and Yang, Ziyue and Guo, Yao and Chen, Xiangqun},
	year = {2017},
	pages = {23--26},
}

@inproceedings{vallee-rai_soot_1999,
	series = {{CASCON} '99},
	title = {Soot - a {Java} {Bytecode} {Optimization} {Framework}},
	abstract = {This paper presents Soot, a framework for optimizing Java bytecode. The framework is implemented in Java and supports three intermediate representations for representing Java bytecode: Baf, a streamlined representation of bytecode which is simple to manipulate; Jimple, a typed 3-address intermediate representation suitable for optimization; and Grimp, an aggregated version of Jimple suitable for decompilation. We describe the motivation for each representation, and the salient points in translating from one representation to another.In order to demonstrate the usefulness of the framework, we have implemented intraprocedural and whole program optimizations. To show that whole program bytecode optimization can give performance improvements, we provide experimental results for 12 large benchmarks, including 8 SPECjvm98 benchmarks running on JDK 1.2 for GNU/Linuxtm. These results show up to 8\% improvement when the optimized bytecode is run using the interpreter and up to 21\% when run using the JIT compiler.},
	booktitle = {Proceedings of the 1999 {Conference} of the {Centre} for {Advanced} {Studies} on {Collaborative} {Research}},
	publisher = {IBM Press},
	author = {Vallée-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
	year = {1999},
	note = {Place: Mississauga, Ontario, Canada},
	pages = {13},
}

@misc{noauthor_soot_nodate,
	title = {Soot},
	url = {https://soot-oss.github.io/soot/},
	urldate = {2023-06-11},
	journal = {Soot - A framework for analyzing and transforming Java and Android applications},
}

@inproceedings{allix_androzoo_2016,
	address = {New York, NY, USA},
	series = {{MSR} '16},
	title = {{AndroZoo}: {Collecting} {Millions} of {Android} {Apps} for the {Research} {Community}},
	isbn = {978-1-4503-4186-8},
	url = {https://doi.org/10.1145/2901739.2903508},
	doi = {10.1145/2901739.2903508},
	abstract = {We present a growing collection of Android Applications collected from several sources, including the official Google Play app market. Our dataset, AndroZoo, currently contains more than three million apps, each of which has been analysed by tens of different Antivirus products to know which applications are detected as Malware. We provide this dataset to contribute to ongoing research efforts, as well as to enable new potential research topics on Android Apps. By releasing our dataset to the research community, we also aim at encouraging our fellow researchers to engage in reproducible experiments.},
	booktitle = {Proceedings of the 13th {International} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {Association for Computing Machinery},
	author = {Allix, Kevin and Bissyandé, Tegawendé F. and Klein, Jacques and Le Traon, Yves},
	year = {2016},
	note = {event-place: Austin, Texas},
	keywords = {android applications, APK, software repository},
	pages = {468--471},
}

@article{khanmohammadi_empirical_2019,
	title = {Empirical study of android repackaged applications},
	volume = {24},
	issn = {1573-7616},
	url = {https://doi.org/10.1007/s10664-019-09760-3},
	doi = {10.1007/s10664-019-09760-3},
	abstract = {The growing popularity of Android applications has generated increased concerns over the danger of piracy and the spread of malware, and particularly of adware: malware that seeks to present unwanted advertisements to the user. A popular way to distribute malware in the mobile world is through repackaging of legitimate apps. This process consists of downloading, unpacking, manipulating, recompiling an application, and publishing it again in an app store. In this paper, we conduct an empirical study of over 15,000 apps to gain insights into the factors that drive the spread of repackaged apps. We also examine the motivations of developers who publish repackaged apps and those of users who download them, as well as the factors that determine which apps are chosen for repackaging, and the ways in which the apps are modified during the repackaging process. Having observed that adware is particularly prevalent in repackaged apps, we focus on this type of malware and examine how the app is modified when it is injected in an app’s code. Our findings shed much needed light on this class of malware that can be useful to security experts, and allow us to make recommendations that could lead to the creation of more effective malware detection tools, Furthermore, on the basis of our results, we propose a novel app indexing scheme that minimizes the number of comparisons needed to detect repackaged apps.},
	number = {6},
	journal = {Empirical Software Engineering},
	author = {Khanmohammadi, Kobra and Ebrahimi, Neda and Hamou-Lhadj, Abdelwahab and Khoury, Raphaël},
	month = dec,
	year = {2019},
	pages = {3587--3629},
}

@misc{noauthor_about_nodate,
	title = {About us - {VirusTotal}},
	url = {https://support.virustotal.com/hc/en-us/categories/360000160117-About-us},
	urldate = {2023-06-15},
	journal = {VirusTotal},
}

@book{skoudis_malware_2003,
	address = {USA},
	title = {Malware: {Fighting} {Malicious} {Code}},
	isbn = {0-13-101405-6},
	abstract = {Reveals how attackers install malicious code and how they evade detection Shows how you can defeat their schemes and keep your computers and network safe! Details viruses, worms, backdoors, Trojan horses, RootKits, and other threats Explains how to handle today's threats, with an eye on handling the threats to comeKeep control of your systems out of the hands of unknown attackersIgnoring the threat of malware is one of the most reckless things you can do in today's increasingly hostile computing environment. Malware is malicious code planted on your computer, and it can give the attacker a truly alarming degree of control over your system, network, and data-all without your knowledge! Written for computer pros and savvy home users by computer security expert Edward Skoudis, Malware: Fighting Malicious Code covers everything you need to know about malware, and how to defeat it!This book devotes a full chapter to each type of malware-viruses, worms, malicious code delivered through Web browsers and e-mail clients, backdoors, Trojan horses, user-level RootKits, and kernel-level manipulation. You'll learn about the characteristics and methods of attack, evolutionary trends, and how to defend against each type of attack. Real-world examples of malware attacks help you translate thought into action, and a special defender's toolbox chapter shows how to build your own inexpensive code analysis lab to investigate new malware specimens on your own. Throughout, Skoudis' clear, engaging style makes the material approachable and enjoyable to learn. This book includes: Solutions and examples that cover both UNIX® and Windows® Practical, time-tested, real-world actions you can take to secure your systems Instructions for building your own inexpensive malware code analysis lab so you can get familiar with attack and defensive tools harmlessly!Malware: Fighting Malicious Code is intended for system administrators, network personnel, security personnel, savvy home computer users, and anyone else interested in keeping their systems safe from attackers.},
	publisher = {Prentice Hall PTR},
	author = {Skoudis, Ed and Zeltser, Lenny},
	year = {2003},
}

@inproceedings{felt_survey_2011,
	address = {New York, NY, USA},
	series = {{SPSM} '11},
	title = {A {Survey} of {Mobile} {Malware} in the {Wild}},
	isbn = {978-1-4503-1000-0},
	url = {https://doi-org.ez54.periodicos.capes.gov.br/10.1145/2046614.2046618},
	doi = {10.1145/2046614.2046618},
	abstract = {Mobile malware is rapidly becoming a serious threat. In this paper, we survey the current state of mobile malware in the wild. We analyze the incentives behind 46 pieces of iOS, Android, and Symbian malware that spread in the wild from 2009 to 2011. We also use this data set to evaluate the effectiveness of techniques for preventing and identifying mobile malware. After observing that 4 pieces of malware use root exploits to mount sophisticated attacks on Android phones, we also examine the incentives that cause non-malicious smartphone tinkerers to publish root exploits and survey the availability of root exploits.},
	booktitle = {Proceedings of the 1st {ACM} {Workshop} on {Security} and {Privacy} in {Smartphones} and {Mobile} {Devices}},
	publisher = {Association for Computing Machinery},
	author = {Felt, Adrienne Porter and Finifter, Matthew and Chin, Erika and Hanna, Steve and Wagner, David},
	year = {2011},
	note = {event-place: Chicago, Illinois, USA},
	keywords = {mobile devices, malware, smartphones},
	pages = {3--14},
}

@inproceedings{zhou_dissecting_2012,
	title = {Dissecting {Android} {Malware}: {Characterization} and {Evolution}},
	doi = {10.1109/SP.2012.16},
	booktitle = {2012 {IEEE} {Symposium} on {Security} and {Privacy}},
	author = {Zhou, Yajin and Jiang, Xuxian},
	year = {2012},
	pages = {95--109},
}

@article{jung_repackaging_2013,
	title = {Repackaging {Attack} on {Android} {Banking} {Applications} and {Its} {Countermeasures}},
	volume = {73},
	issn = {1572-834X},
	url = {https://doi.org/10.1007/s11277-013-1258-x},
	doi = {10.1007/s11277-013-1258-x},
	abstract = {Although anyone can easily publish Android applications (or apps) in an app marketplace according to an open policy, decompiling the apps is also easy due to the structural characteristics of the app building process, making them very vulnerable to forgery or modification attacks. In particular, users may suffer direct financial loss if this vulnerability is exploited in security-critical private and business applications, such as online banking. In this paper, some of the major Android-based smartphone banking apps in Korea being distributed on either the Android Market or the third party market were tested to verify whether a money transfer could be made to an unintended recipient. The experimental results with real Android banking apps showed that an attack of this kind is possible without having to illegally obtain any of the sender’s personal information, such as the senders public key certificate, the password to their bank account, or their security card. In addition, the cause of this vulnerability is analyzed and some technical countermeasures are discussed.},
	number = {4},
	journal = {Wireless Personal Communications},
	author = {Jung, Jin-Hyuk and Kim, Ju Young and Lee, Hyeong-Chan and Yi, Jeong Hyun},
	month = dec,
	year = {2013},
	pages = {1421--1437},
}

@misc{turner_how_nodate,
	title = {How {Many} {Android} {Users} {Are} {There}? {Global} and {US} {Statistics} (2023)},
	url = {https://www.bankmycell.com/blog/how-many-android-users-are-there},
	urldate = {2023-07-05},
	journal = {BankMyCell},
	author = {Turner, Ash},
}

@misc{turner_how_nodate-1,
	title = {How {Many} {Apps} {In} {Google} {Play} {Store}? ({Jul} 2023)},
	url = {https://www.bankmycell.com/blog/number-of-google-play-store-apps/},
	urldate = {2023-07-05},
	journal = {BankMyCell},
	author = {Turner, Ash},
}

@inproceedings{truong_company_2014,
	address = {New York, NY, USA},
	series = {{WWW} '14},
	title = {The {Company} {You} {Keep}: {Mobile} {Malware} {Infection} {Rates} and {Inexpensive} {Risk} {Indicators}},
	isbn = {978-1-4503-2744-2},
	url = {https://doi.org/10.1145/2566486.2568046},
	doi = {10.1145/2566486.2568046},
	abstract = {There is little information from independent sources in the public domain about mobile malware infection rates. The only previous independent estimate (0.0009\%) [11], was based on indirect measurements obtained from domain-name resolution traces. In this paper, we present the first independent study of malware infection rates and associated risk factors using data collected directly from over 55,000 Android devices. We find that the malware infection rates in Android devices estimated using two malware datasets (0.28\% and 0.26\%), though small, are significantly higher than the previous independent estimate. Based on the hypothesis that some application stores have a greater density of malicious applications and that advertising within applications and cross-promotional deals may act as infection vectors, we investigate whether the set of applications used on a device can serve as an indicator for infection of that device. Our analysis indicates that, while not an accurate indicator of infection by itself, the application set does serve as an inexpensive method for identifying the pool of devices on which more expensive monitoring and analysis mechanisms should be deployed. Using our two malware datasets we show that this indicator performs up to about five times better at identifying infected devices than the baseline of random checks. Such indicators can be used, for example, in the search for new or previously undetected malware. It is therefore a technique that can complement standard malware scanning. Our analysis also demonstrates a marginally significant difference in battery use between infected and clean devices.},
	booktitle = {Proceedings of the 23rd {International} {Conference} on {World} {Wide} {Web}},
	publisher = {Association for Computing Machinery},
	author = {Truong, Hien Thi Thu and Lagerspetz, Eemil and Nurmi, Petteri and Oliner, Adam J. and Tarkoma, Sasu and Asokan, N. and Bhattacharya, Sourav},
	year = {2014},
	note = {event-place: Seoul, Korea},
	keywords = {infection rate, android, malware detection, mobile malware},
	pages = {39--50},
}

@misc{noauthor_androiddowgin_nodate,
	title = {Android/{Dowgin} threat description},
	url = {https://www.f-secure.com/sw-desc/adware-android-dowgin-online.shtml},
	journal = {F-Secure Labs},
}

@misc{noauthor_what_nodate,
	title = {What is {Adware}? – {Definition} and {Explanation}},
	url = {https://www.kaspersky.com/resource-center/threats/adware},
	journal = {Karspersky},
}
